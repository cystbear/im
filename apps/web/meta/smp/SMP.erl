%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:3.0
%% Purpose: encoder and decoder to the types in mod SMP

-module('SMP').
-compile(nowarn_unused_vars).
-include("SMP.hrl").
-asn1_info([{vsn,'3.0'},
            {module,'SMP'},
            {options,[warnings,ber,errors,
 {cwd,"/Users/cystbear/sites/trin/smp/src"},
 {outdir,"/Users/cystbear/sites/trin/smp/src"},
 {i,"."},
 {i,"/Users/cystbear/sites/trin/smp/src"}]}]).

-export([encoding_rule/0,bit_string_format/0,         legacy_erlang_types/0]).
-export([
'enc_Auth'/2,
'enc_Person'/2,
'enc_Presence'/2,
'enc_Add'/2,
'enc_Confirm'/2,
'enc_Room'/2,
'enc_Create'/2,
'enc_Join'/2,
'enc_RoomEvent'/2,
'enc_Message'/2
]).

-export([
'dec_Auth'/2,
'dec_Person'/2,
'dec_Presence'/2,
'dec_Add'/2,
'dec_Confirm'/2,
'dec_Room'/2,
'dec_Create'/2,
'dec_Join'/2,
'dec_RoomEvent'/2,
'dec_Message'/2
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('Auth',Data) -> 'enc_Auth'(Data);
encode_disp('Person',Data) -> 'enc_Person'(Data);
encode_disp('Presence',Data) -> 'enc_Presence'(Data);
encode_disp('Add',Data) -> 'enc_Add'(Data);
encode_disp('Confirm',Data) -> 'enc_Confirm'(Data);
encode_disp('Room',Data) -> 'enc_Room'(Data);
encode_disp('Create',Data) -> 'enc_Create'(Data);
encode_disp('Join',Data) -> 'enc_Join'(Data);
encode_disp('RoomEvent',Data) -> 'enc_RoomEvent'(Data);
encode_disp('Message',Data) -> 'enc_Message'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('Auth',Data) -> 'dec_Auth'(Data);
decode_disp('Person',Data) -> 'dec_Person'(Data);
decode_disp('Presence',Data) -> 'dec_Presence'(Data);
decode_disp('Add',Data) -> 'dec_Add'(Data);
decode_disp('Confirm',Data) -> 'dec_Confirm'(Data);
decode_disp('Room',Data) -> 'dec_Room'(Data);
decode_disp('Create',Data) -> 'dec_Create'(Data);
decode_disp('Join',Data) -> 'dec_Join'(Data);
decode_disp('RoomEvent',Data) -> 'dec_RoomEvent'(Data);
decode_disp('Message',Data) -> 'dec_Message'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  Auth
%%================================
'enc_Auth'(Val) ->
    'enc_Auth'(Val, [<<48>>]).

'enc_Auth'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute username(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute token(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>]),

%%-------------------------------------------------
%% attribute services(3) with type SET OF
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Auth_services'(Cindex3, [<<49>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Auth_services
%%================================
'enc_Auth_services'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Auth_services_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Auth_services_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Auth_services_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
base -> encode_enumerated(1, [<<10>>]);
groupchat -> encode_enumerated(2, [<<10>>]);
messaging -> encode_enumerated(3, [<<10>>]);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_Auth_services_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Auth_services'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_enumerated(V1,[{base,1},{groupchat,2},{messaging,3}],[10]) || V1 <- Tlv1].




'dec_Auth'(Tlv) ->
   'dec_Auth'(Tlv, [16]).

'dec_Auth'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute username(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[2]),

%%-------------------------------------------------
%% attribute token(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2,[4]),

%%-------------------------------------------------
%% attribute services(3) with type SET OF
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Auth_services'(V3, [17]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'Auth', Term1, Term2, Term3}.



%%================================
%%  Person
%%================================
'enc_Person'(Val) ->
    'enc_Person'(Val, [<<48>>]).

'enc_Person'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute name(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>]),

%%-------------------------------------------------
%% attribute surname(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>]),

%%-------------------------------------------------
%% attribute username(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<4>>]),

%%-------------------------------------------------
%% attribute status(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Person'(Tlv) ->
   'dec_Person'(Tlv, [16]).

'dec_Person'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute name(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1,[4]),

%%-------------------------------------------------
%% attribute surname(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2,[4]),

%%-------------------------------------------------
%% attribute username(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3,[4]),

%%-------------------------------------------------
%% attribute status(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[2]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Person', Term1, Term2, Term3, Term4}.



%%================================
%%  Presence
%%================================
'enc_Presence'(Val) ->
    'enc_Presence'(Val, [<<48>>]).

'enc_Presence'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute size(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute userlist(2) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Presence_userlist'(Cindex2, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Presence_userlist
%%================================
'enc_Presence_userlist'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Presence_userlist_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Presence_userlist_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Presence_userlist_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Person'(H, [<<48>>]),
   'enc_Presence_userlist_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_Presence_userlist'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Person'(V1, [16]) || V1 <- Tlv1].




'dec_Presence'(Tlv) ->
   'dec_Presence'(Tlv, [16]).

'dec_Presence'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute size(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[2]),

%%-------------------------------------------------
%% attribute userlist(2) with type SEQUENCE OF
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Presence_userlist'(V2, [16]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Presence', Term1, Term2}.



%%================================
%%  Add
%%================================
'enc_Add'(Val) ->
    'enc_Add'(Val, [<<48>>]).

'enc_Add'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute user(1)   External SMP:Person
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Person'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute status(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Add'(Tlv) ->
   'dec_Add'(Tlv, [16]).

'dec_Add'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute user(1)   External SMP:Person
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Person'(V1, [16]),

%%-------------------------------------------------
%% attribute status(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Add', Term1, Term2}.



%%================================
%%  Confirm
%%================================
'enc_Confirm'(Val) ->
    'enc_Confirm'(Val, [<<48>>]).

'enc_Confirm'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute user(1)   External SMP:Person
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Person'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Confirm'(Tlv) ->
   'dec_Confirm'(Tlv, [16]).

'dec_Confirm'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute user(1)   External SMP:Person
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Person'(V1, [16]),

%%-------------------------------------------------
%% attribute type(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Confirm', Term1, Term2}.



%%================================
%%  Room
%%================================
'enc_Room'(Val) ->
    'enc_Room'(Val, [<<48>>]).

'enc_Room'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute name(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<4>>]),

%%-------------------------------------------------
%% attribute id(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Room'(Tlv) ->
   'dec_Room'(Tlv, [16]).

'dec_Room'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute name(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1,[4]),

%%-------------------------------------------------
%% attribute id(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[2]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Room', Term1, Term2}.



%%================================
%%  Create
%%================================
'enc_Create'(Val) ->
    'enc_Create'(Val, [<<48>>]).

'enc_Create'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute room(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute description(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute acl(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<2>>]),

%%-------------------------------------------------
%% attribute settings(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Create'(Tlv) ->
   'dec_Create'(Tlv, [16]).

'dec_Create'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute room(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[2]),

%%-------------------------------------------------
%% attribute description(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[2]),

%%-------------------------------------------------
%% attribute acl(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_integer(V3,[2]),

%%-------------------------------------------------
%% attribute settings(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[2]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Create', Term1, Term2, Term3, Term4}.



%%================================
%%  Join
%%================================
'enc_Join'(Val) ->
    'enc_Join'(Val, [<<48>>]).

'enc_Join'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute room(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute answer(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<1>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Join'(Tlv) ->
   'dec_Join'(Tlv, [16]).

'dec_Join'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute room(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[2]),

%%-------------------------------------------------
%% attribute answer(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2,[1]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'Join', Term1, Term2}.



%%================================
%%  RoomEvent
%%================================
'enc_RoomEvent'(Val) ->
    'enc_RoomEvent'(Val, [<<48>>]).

'enc_RoomEvent'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute room(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<2>>]),

%%-------------------------------------------------
%% attribute message(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<4>>]),

%%-------------------------------------------------
%% attribute author(3)   External SMP:Person
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_Person'(Cindex3, [<<48>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RoomEvent'(Tlv) ->
   'dec_RoomEvent'(Tlv, [16]).

'dec_RoomEvent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute room(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1,[2]),

%%-------------------------------------------------
%% attribute message(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2,[4]),

%%-------------------------------------------------
%% attribute author(3)   External SMP:Person
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_Person'(V3, [16]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RoomEvent', Term1, Term2, Term3}.



%%================================
%%  Message
%%================================
'enc_Message'(Val) ->
    'enc_Message'(Val, [<<48>>]).

'enc_Message'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute author(1)   External SMP:Person
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Person'(Cindex1, [<<48>>]),

%%-------------------------------------------------
%% attribute room(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<2>>]),

%%-------------------------------------------------
%% attribute body(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<4>>]),

%%-------------------------------------------------
%% attribute status(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<2>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Message'(Tlv) ->
   'dec_Message'(Tlv, [16]).

'dec_Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute author(1)   External SMP:Person
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Person'(V1, [16]),

%%-------------------------------------------------
%% attribute room(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2,[2]),

%%-------------------------------------------------
%% attribute body(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3,[4]),

%%-------------------------------------------------
%% attribute status(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4,[2]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Message', Term1, Term2, Term3, Term4}.


%%%
%%% Run-time functions.
%%%

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_enumerated(Tlv, NamedNumberList, Tags) ->
    Buffer = match_tags(Tlv, Tags),
    decode_enumerated_notag(Buffer, NamedNumberList, Tags).

decode_enumerated1(Val, NamedNumberList) ->
    case lists:keyfind(Val, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            {asn1_enum,Val}
    end.

decode_enumerated_notag(Buffer, {NamedNumberList,ExtList}, _Tags) ->
    IVal = decode_integer(Buffer),
    case decode_enumerated1(IVal, NamedNumberList) of
        {asn1_enum,IVal} ->
            decode_enumerated1(IVal, ExtList);
        EVal ->
            EVal
    end;
decode_enumerated_notag(Buffer, NNList, _Tags) ->
    IVal = decode_integer(Buffer),
    case decode_enumerated1(IVal, NNList) of
        {asn1_enum,_} ->
            exit({error,{asn1,{illegal_enumerated,IVal}}});
        EVal ->
            EVal
    end.

decode_integer(Bin) ->
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_integer(Tlv, TagIn) ->
    V = match_tags(Tlv, TagIn),
    decode_integer(V).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_enumerated(Val, TagIn) when is_integer(Val) ->
    encode_tags(TagIn, encode_integer(Val)).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
